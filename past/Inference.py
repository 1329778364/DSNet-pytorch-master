# %%
import cv2
import h5py
from PIL import Image
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import cm as c
from keras.models import model_from_json


# %%
def load_model():
    # Function to load and return neural network model
    json_file = open('models/Model.json', 'r')
    loaded_model_json = json_file.read()
    json_file.close()
    loaded_model = model_from_json(loaded_model_json)
    loaded_model.load_weights("weights/model_B_weights.h5")
    return loaded_model


def create_img(path):
    # Function to load,normalize and return image
    print(path)
    im = Image.open(path).convert('RGB')

    im = np.array(im)

    im = im / 255.0

    im[:, :, 0] = (im[:, :, 0] - 0.485) / 0.229
    im[:, :, 1] = (im[:, :, 1] - 0.456) / 0.224
    im[:, :, 2] = (im[:, :, 2] - 0.406) / 0.225

    im = np.expand_dims(im, axis=0)
    return im


# %%
def predict(path):
    # Function to load image,predict heat map, generate count and return (count , image , heat map)
    model = load_model()
    image = create_img(path)
    hmap = model.predict(image)
    count = np.sum(hmap)
    return count, image, hmap

if __name__ == '__main__':

    # %%
    count, img, hmap = predict('data/part_A_final/test_data/images/IMG_170.jpg')
    # %%

    # count, img, hmap = predict('image/wlqby.jpeg')

    # count, img, hmap = predict('../BaiduAi-github/yuncong_data/our/train/19/100.jpg')
    # %%

    # print(hmap)
    # Print count, image, heat map
    plt.imshow(img.reshape(img.shape[1],img.shape[2],img.shape[3]))
    plt.show()
    plt.imshow(hmap.reshape(hmap.shape[1], hmap.shape[2]), cmap=c.jet)
    plt.show()

    # %%
    print(np.amax(hmap))
    # %%
    location = []
    n = 0
    for i in range(hmap.shape[1]):
        for j in range(hmap.shape[2]):
            if hmap[0][i][j][0] > 0.40244 * np.amax(hmap) and hmap[0][i][j][0] < 0.80244 * np.amax(hmap):
                location.append((8 * j, 8 * i))
                n = n + 1
    print(n)
    print(count)
    print(location)
    # %%
    temp = h5py.File('data/part_A_final/test_data/ground/IMG_170.h5', 'r')
    temp_1 = np.asarray(temp['density'])
    # plt.imshow(temp_1,cmap = c.jet)
    print("Original Count : ", int(np.sum(temp_1)) + 1)
    # %%

    # [(48, 0), (56, 0), (64, 0), (72, 0), (80, 0), (88, 0), (96, 0), (104, 0), (112, 0), (120, 0), (128, 0), (136, 0), (144, 0), (152, 0), (160, 0), (168, 0), (176, 0), (184, 0), (192, 0), (200, 0), (208, 0), (216, 0), (224, 0), (232, 0), (240, 0), (248, 0), (256, 0), (264, 0), (272, 0), (280, 0), (288, 0), (296, 0), (304, 0), (312, 0), (320, 0), (384, 0), (392, 0), (400, 0), (408, 0), (416, 0), (424, 0), (432, 0), (440, 0), (448, 0), (456, 0), (464, 0), (472, 0), (480, 0), (488, 0), (496, 0), (576, 0), (584, 0), (592, 0), (600, 0), (608, 0), (616, 0), (624, 0), (632, 0), (648, 0), (656, 0), (664, 0), (672, 0), (680, 0), (744, 0), (752, 0), (760, 0), (768, 0), (776, 0), (784, 0), (792, 0), (800, 0), (808, 0), (816, 0), (824, 0), (832, 0), (840, 0), (848, 0), (856, 0), (864, 0), (872, 0), (880, 0), (888, 0), (896, 0), (904, 0), (912, 0), (920, 0), (928, 0), (936, 0), (944, 0), (952, 0), (960, 0), (968, 0), (976, 0), (984, 0), (992, 0), (1000, 0), (1008, 0), (1016, 0),
    #  (72, 8), (80, 8), (88, 8), (96, 8), (104, 8), (112, 8), (120, 8), (128, 8), (136, 8), (144, 8), (152, 8), (160, 8), (168, 8), (176, 8), (184, 8), (192, 8), (200, 8), (208, 8), (216, 8), (224, 8), (312, 8), (320, 8), (328, 8), (336, 8), (344, 8), (352, 8), (360, 8), (368, 8), (376, 8), (384, 8), (392, 8), (400, 8), (408, 8), (416, 8), (424, 8), (432, 8), (440, 8), (448, 8), (456, 8), (464, 8), (472, 8), (480, 8), (488, 8), (496, 8), (576, 8), (592, 8), (608, 8), (672, 8), (680, 8), (688, 8), (696, 8), (704, 8), (712, 8), (720, 8), (728, 8), (736, 8), (744, 8), (752, 8), (760, 8), (768, 8), (776, 8), (784, 8), (792, 8), (800, 8), (808, 8), (816, 8), (824, 8), (832, 8), (840, 8), (848, 8), (856, 8), (864, 8), (872, 8), (880, 8), (888, 8), (896, 8), (904, 8), (912, 8), (920, 8), (928, 8), (936, 8), (944, 8), (952, 8), (960, 8), (976, 8), (984, 8), (992, 8), (1000, 8), (1016, 8),
    #  (56, 16), (64, 16), (72, 16), (80, 16), (88, 16), (96, 16), (104, 16), (112, 16), (120, 16), (128, 16), (136, 16), (144, 16), (152, 16), (160, 16), (168, 16), (176, 16), (184, 16), (192, 16), (200, 16), (208, 16), (216, 16), (224, 16), (232, 16), (240, 16), (248, 16), (264, 16), (272, 16), (280, 16), (288, 16), (296, 16), (304, 16), (312, 16), (320, 16), (328, 16), (336, 16), (344, 16), (352, 16), (360, 16), (368, 16), (376, 16), (384, 16), (392, 16), (400, 16), (408, 16), (416, 16), (424, 16), (432, 16), (440, 16), (448, 16), (456, 16), (464, 16), (472, 16), (480, 16), (488, 16), (496, 16), (576, 16), (592, 16), (680, 16), (688, 16), (696, 16), (704, 16), (712, 16), (720, 16), (728, 16), (736, 16), (744, 16), (752, 16), (768, 16), (800, 16), (808, 16), (816, 16), (824, 16), (832, 16), (840, 16), (848, 16), (856, 16), (864, 16), (872, 16), (880, 16), (888, 16), (896, 16), (904, 16), (912, 16), (920, 16), (928, 16), (936, 16), (944, 16), (960, 16), (984, 16), (992, 16), (1000, 16), (1008, 16), (1016, 16),
    #  (96, 24), (104, 24), (112, 24), (120, 24), (128, 24), (136, 24), (144, 24), (152, 24), (160, 24), (168, 24), (176, 24), (184, 24), (192, 24), (208, 24), (344, 24), (352, 24), (360, 24), (712, 24), (720, 24), (736, 24), (832, 24), (840, 24),
    #  (112, 32), (120, 32), (128, 32), (136, 32), (144, 32), (152, 32), (160, 32), (168, 32), (176, 32),
    #  (136, 40), (144, 40), (136, 48), (144, 48),
    #  (1016, 72),
    #  (1008, 80), (1016, 80),
    #  (1016, 88),
    #  (1008, 96), (1016, 96),
    #  (1008, 104), (1016, 104), (1008, 112), (1016, 112), (1008, 120), (1008, 160), (1008, 168), (1016, 168), (1008, 176)]